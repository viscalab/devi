---
title: "Untitled"
format: html
editor: visual
---


```{r}
library(tidyverse)
library(rlang)
library(broom)

list.files("R", full.names = TRUE) |> walk(source)
```

```{r}
 fit |> 
  glance() |> 
  select(null.deviance, df.null, deviance, df.residual) |> 
  pivot_longer(cols = )
 # mutate(p_value = pchisq(null.deviance, df = df.null, lower.tail = FALSE)) 
```

## Reading the data

```{r}
dat <- read.csv("data/my_data.csv") |> 
  filter(participant == "s01")
```

Number of trials for each value of the predictor

```{r}
dat |> 
  group_by(x) |> 
  count()
```

## Fit a logistic model to the data using glm

```{r}
fit <- glm(resp ~ x, family = binomial(logit), data = dat)

fit
```

```{r}
prop <- dat |> 
  group_by(x) |> 
  summarise(k = sum(resp), n = n(), prop = k / n)
```

```{r}
fit <- glm(cbind(k, n - k) ~ x, 
           family = binomial(logit),
           data = prop)

fit
```

```{r}
x_seq <- dat |> 
  summarise(xmin = min(x), xmax = max(x)) |> 
  reframe(x = seq(xmin, xmax, 10))

psy <- fit |> 
  augment(newdata = x_seq, 
          type.predict = "response")
```

```{r}
ggplot() +
  geom_point(data = prop,
             aes(x = x, y = prop)) +
  geom_line(data = psy, 
            aes(x = x, y = .fitted)) 
```

### Doing it by hand

The statistical model is

$$f(k_1, \cdots, k_8;\beta_0, \beta_1) = \prod_{i=1}^{8} \binom{120}{k_i} \Psi(x_i;\beta_0, \beta_1)^{k_i} (1-\Psi(x_i;\beta_0, \beta_1))^{120-k_i}$$

and the log likelihood dropping the binomial coefficient because does not depends on the parameters

$$l(\beta_0, \beta_1) = \sum_{i=1}^{8} k_i  \log \Psi(x_i;\beta_0, \beta_1) + (120-k_i) \log (1-\Psi(x_i;\beta_0, \beta_1))$$

```{r}
logistic_fun <- function(x, p) {
  1 / (1 + exp(-p[1] - p[2] * x))
}
```

```{r}
create_neg_log_lik_fun <- function(.data) {
  function(p) {
    psi <- logistic_fun(.data$x, p)
    -sum(.data$k * log(psi) + (.data$n - .data$k) * log(1 - psi))
  }
}

neg_log_lik_fun <- create_neg_log_lik_fun(prop)

fit_hand <- optim(c(1, .01), neg_log_lik_fun)
```

```{r}
create_neg_log_lik_saturated_fun <- function(.data) {
  function(p) {
    -sum(.data$k * log(p) + (.data$n - .data$k) * log(1 - p))
  }
}

neg_log_lik_saturated_fun <- create_neg_log_lik_saturated_fun(prop)

fit_hand_saturated <- optim(c(.1, .1, .5, .5, .8, .9, .9, .9),
                            neg_log_lik_saturated_fun)

fit_hand_saturated
```

```{r}
residual_deviance_hand <- 2 * (-fit_hand_saturated$value - (-fit_hand$value))

residual_deviance_hand
```

```{r}

```

```{r}
create_neg_log_lik_null_fun <- function(.data) {
  n_predictor <- length(.data$k)
  function(p) {
    -sum(.data$k * log(rep(p, n_predictor)) + 
           (.data$n - .data$k) * log(1 - rep(p, n_predictor)))
  }
}

neg_log_lik_null_fun <- create_neg_log_lik_null_fun(prop)

fit_hand_null <- optim(c(.5), neg_log_lik_null_fun)

fit_hand_null
```

```{r}
null_deviance_hand <- 2 * (-fit_hand_saturated$value - (-fit_hand_null$value))

null_deviance_hand
```

```{r}
pchisq(null_deviance_hand, 7, lower.tail = FALSE)
```
